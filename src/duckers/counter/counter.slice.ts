import decrementAction from './actions/decrement.action';
import incrementAction from './actions/increment.action';

import { createSlice } from '@reduxjs/toolkit';

import type { PayloadAction } from '@reduxjs/toolkit';

/**
 * Interface representing the state of the counter.
 */
export interface CounterState {
  /**
   * The status of the counter.
   */
  status: 'idle' | 'loading';
  /**
   * The current value of the counter.
   */
  value: number;
}

const initialState: CounterState = {
  status: 'idle',
  value: 0,
};

const counterSlice = createSlice({
  extraReducers: (builder) => {
    builder.addCase(incrementAction.pending, (state) => {
      state.status = 'loading';
    });
    builder.addCase(incrementAction.fulfilled, (state) => {
      state.status = 'idle';
    });
    builder.addCase(decrementAction.pending, (state) => {
      state.status = 'loading';
    });
    builder.addCase(decrementAction.fulfilled, (state) => {
      state.status = 'idle';
    });
  },
  initialState,
  name: 'counter',
  reducers: {
    /**
     * Sets the counter value.
     *
     * @param {CounterState} state - The current state of the counter.
     * @param {PayloadAction<number>} action - The action containing the new counter value.
     */
    setCounterValue: (state, action: PayloadAction<number>) => {
      state.value = action.payload;
    },
  },
});

/**
 * Action creators generated by createSlice.
 */
export const { setCounterValue } = counterSlice.actions;

/**
 * The reducer for the counter slice.
 */
export default counterSlice.reducer;
